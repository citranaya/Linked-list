#include <stdio.h>
#include <stdlib.h>

// Struktur node untuk double linked list circular
typedef struct alamat {
    int data;
    struct alamat* prev;
    struct alamat* next;
} alamat;

// Fungsi untuk membuat node baru
alamat* createNode(int data) {
    alamat* newNode = (alamat*)malloc(sizeof(alamat)); 
    newNode->data = data; 
    newNode->prev = NULL; 
    newNode->next = NULL; 
    return newNode;
}

// Fungsi untuk memasukkan data ke dalam linked list
void insertNode(alamat** head, int data) {
    alamat* newNode = createNode(data);
    if (*head == NULL) { 
        newNode->next = newNode; 
        newNode->prev = newNode; 
        *head = newNode; 
        
    } else { // jika list tidak kosong
        alamat* tail = (*head)->prev; 
        tail->next = newNode; 
        newNode->prev = tail; 
        newNode->next = *head; 
        (*head)->prev = newNode;
    }
}

void displayList(alamat* head) {
    if (head == NULL) return; 
    alamat* temp = head; 
    do {
        printf("Memory address: %p, Data: %d\n", (void*)temp, temp->data); 
        temp = temp->next; 
    } while (temp != head); 
}

void swapNodes(alamat** head, alamat* node1, alamat* node2) {
    if (node1 == node2) return;

    alamat* prev1 = node1->prev; 
    alamat* next1 = node1->next; 
    alamat* prev2 = node2->prev; 
    alamat* next2 = node2->next; 

    if (node1->next == node2) { 
        node1->next = next2; 
        node1->prev = node2; 
        node2->next = node1; 
        node2->prev = prev1; 
        if (next2 != NULL) next2->prev = node1; 
        if (prev1 != NULL) prev1->next = node2; 
    } else if (node2->next == node1) { 
        node2->next = next1; 
        node2->prev = node1;
        node1->next = node2; 
        node1->prev = prev2;
        if (next1 != NULL) next1->prev = node2; 
        if (prev2 != NULL) prev2->next = node1; 
    } else { 
        if (prev1 != NULL) prev1->next = node2; 
        if (next1 != NULL) next1->prev = node2; 
        if (prev2 != NULL) prev2->next = node1; 
        if (next2 != NULL) next2->prev = node1; 

        node1->next = next2; 
        node1->prev = prev2; 
        node2->next = next1; 
        node2->prev = prev1; 
    }

    if (*head == node1) *head = node2; 
    else if (*head == node2) *head = node1; 
}

// Fungsi untuk mengurutkan linked list dengan menukar node
void sortList(alamat** head) {
    if (*head == NULL || (*head)->next == *head) return;
    alamat* i;
    alamat* j;
    for (i = *head; i->next != *head; i = i->next) { 
        for (j = i->next; j != *head; j = j->next) { 
            if (i->data > j->data) { 
                swapNodes(head, i, j); 
                
                alamat* temp = i;
                i = j;
                j = temp;
            }
        }
    }
}

int main() {
    int N, data;
    alamat* head = NULL;

    // Input jumlah data
    printf("Masukkan jumlah data: ");
    scanf("%d", &N);

    // Input data
    for (int i = 0; i < N; i++) {
        printf("Masukkan data ke-%d: ", i + 1);
        scanf("%d", &data);
        insertNode(&head, data);
    }

    // Tampilkan list sebelum pengurutan
    printf("\nList sebelum pengurutan:\n");
    displayList(head);

    // Mengurutkan list dengan menukar node
    sortList(&head);

    // Tampilkan list setelah pengurutan
    printf("\nList setelah pengurutan:\n");
    displayList(head);

    // Membersihkan memori yang dialokasikan
    alamat* current = head;
    alamat* nextNode;

    // mendeklarasikan dua pointer current dan nextnode
    do {
        nextNode = current->next;
        free(current);
        current = nextNode;
    } while (current != head);

    return 0;
}
